11437
((3) 0 () 8 ((q lib "redex/pict.rkt") (q lib "redex/reduction-semantics.rkt") (q lib "redex/gui.rkt") (q 7615 . 6) (q 30345 . 20) (q 266 . 5) (q 11140 . 5) (q 11001 . 5)) () (h ! (equal) ((c form c (c (? . 0) q render-judgment-form)) q (23687 . 2)) ((c def c (c (? . 1) q test-results)) q (9196 . 2)) ((c def c (c (? . 0) q set-lw-metafunction?!)) c (? . 4)) ((c form c (c (? . 0) q with-compound-rewriter)) q (30066 . 4)) ((c def c (c (? . 0) q curly-quotes-for-strings)) q (28797 . 4)) ((c def c (c (? . 0) q horizontal-bar-spacing)) q (29468 . 5)) ((c def c (c (? . 0) q label-space)) q (24947 . 4)) ((c def c (c (? . 2) q light-pen-color)) q (20648 . 4)) ((c form c (c (? . 0) q with-compound-rewriters)) q (30223 . 3)) ((c def c (c (? . 1) q derivation?)) c (? . 3)) ((c def c (c (? . 0) q judgment-form-cases)) q (26520 . 11)) ((c def c (c (? . 2) q initial-char-width)) q (20169 . 4)) ((c def c (c (? . 0) q relation-clauses-combine)) q (29650 . 5)) ((c def c (c (? . 1) q apply-reduction-relation)) q (4196 . 4)) ((c def c (c (? . 1) q counterexample-term)) c (? . 7)) ((c def c (c (? . 1) q check-redudancy)) q (560 . 4)) ((c def c (c (? . 2) q light-brush-color)) q (20805 . 4)) ((c form c (c (? . 1) q term-match)) q (1125 . 2)) ((c form c (c (? . 0) q render-term)) q (21604 . 3)) ((c def c (c (? . 1) q redex-pseudo-random-generator)) q (12581 . 4)) ((c form c (c (? . 1) q define-term)) q (1086 . 2)) ((c def c (c (? . 0) q reduction-rule-style/c)) q (24790 . 2)) ((c def c (c (? . 1) q make-derivation)) c (? . 3)) ((c def c (c (? . 1) q match-bindings)) q (198 . 3)) ((c def c (c (? . 0) q arrow-space)) q (24838 . 4)) ((c def c (c (? . 0) q set-lw-e!)) c (? . 4)) ((c def c (c (? . 2) q term-node-parents)) q (18920 . 3)) ((c def c (c (? . 1) q covered-cases)) q (9505 . 3)) ((c form c (c (? . 1) q in-hole)) q (725 . 2)) ((c def c (c (? . 1) q struct:bind)) c (? . 5)) ((c form c (c (? . 0) q judgment-form->pict)) q (23836 . 2)) ((c form c (c (? . 1) q ::=)) q (1850 . 2)) ((c def c (c (? . 1) q exn:fail:redex:test-term)) c (? . 6)) ((c def c (c (? . 0) q non-terminal-subscript-style)) q (27638 . 4)) ((c def c (c (? . 1) q exn:fail:redex?)) q (1535 . 3)) ((c def c (c (? . 2) q term-node?)) q (19897 . 3)) ((c form c (c (? . 1) q check-metafunction)) q (11822 . 15)) ((c def c (c (? . 2) q term-node-expr)) q (19431 . 3)) ((c def c (c (? . 2) q term-node-color)) q (19232 . 3)) ((c form c (c (? . 1) q define-metafunction)) q (5078 . 20)) ((c def c (c (? . 1) q bind-exp)) c (? . 5)) ((c def c (c (? . 0) q lw-e)) c (? . 4)) ((c form c (c (? . 1) q I)) q (7800 . 2)) ((c def c (c (? . 0) q render-lw)) q (31535 . 4)) ((c def c (c (? . 1) q plug)) q (1248 . 4)) ((c form c (c (? . 1) q define-metafunction/extension)) q (5869 . 5)) ((c def c (c (? . 0) q arrow->pict)) q (29075 . 3)) ((c def c (c (? . 1) q exn:fail:redex:test-source)) c (? . 6)) ((c form c (c (? . 1) q reduction-relation)) q (2410 . 36)) ((c def c (c (? . 0) q default-font-size)) q (28412 . 4)) ((c def c (c (? . 2) q reduction-steps-cutoff)) q (19953 . 4)) ((c def c (c (? . 0) q grammar-style)) q (27097 . 4)) ((c def c (c (? . 2) q initial-font-size)) q (20068 . 4)) ((c def c (c (? . 1) q exn:fail:redex:test?)) c (? . 6)) ((c def c (c (? . 0) q lw-column)) c (? . 4)) ((c def c (c (? . 0) q struct:lw)) c (? . 4)) ((c form c (c (? . 1) q define-relation)) q (7818 . 10)) ((c def c (c (? . 1) q variables-not-in)) q (1427 . 4)) ((c def c (c (? . 1) q relation-coverage)) q (9374 . 4)) ((c form c (c (? . 1) q extend-reduction-relation)) q (3727 . 2)) ((c def c (c (? . 0) q language->pict)) q (22597 . 5)) ((c def c (c (? . 2) q light-text-color)) q (21123 . 4)) ((c form c (c (? . 1) q O)) q (7809 . 2)) ((c def c (c (? . 0) q set-lw-unq?!)) c (? . 4)) ((c def c (c (? . 2) q show-derivations)) q (17641 . 11)) ((c def c (c (? . 0) q lw-line-span)) c (? . 4)) ((c form c (c (? . 1) q redex-let)) q (943 . 2)) ((c def c (c (? . 0) q to-lw/stx)) q (31479 . 3)) ((c def c (c (? . 0) q lw->pict)) q (31664 . 4)) ((c def c (c (? . 1) q bind?)) c (? . 5)) ((c def c (c (? . 2) q stepper)) q (17099 . 7)) ((c form c (c (? . 1) q redex-match?)) q (70 . 3)) ((c def c (c (? . 1) q set-cache-size!)) q (484 . 3)) ((c def c (c (? . 0) q just-after)) q (31897 . 4)) ((c form c (c (? . 1) q judgment-holds)) q (7461 . 5)) ((c def c (c (? . 0) q literal-style)) q (27303 . 4)) ((c form c (c (? . 1) q test-->>)) q (8343 . 11)) ((c def c (c (? . 2) q traces/ps)) q (14942 . 41)) ((c def c (c (? . 0) q reduction-relation->pict)) q (23107 . 4)) ((c form c (c (? . 1) q redex-generator)) q (10791 . 7)) ((c form c (c (? . 1) q test-->>E)) q (9148 . 2)) ((c form c (c (? . 0) q with-atomic-rewriter)) q (29893 . 4)) ((c def c (c (? . 0) q delimit-ellipsis-arguments?)) q (25792 . 4)) ((c def c (c (? . 2) q term-node-height)) q (19831 . 3)) ((c form c (c (? . 1) q check-reduction-relation)) q (11313 . 15)) ((c def c (c (? . 1) q caching-enabled?)) q (385 . 4)) ((c def c (c (? . 0) q set-lw-line-span!)) c (? . 4)) ((c def c (c (? . 1) q exn:fail:redex:generation-failure?)) q (12750 . 3)) ((c def c (c (? . 1) q current-traced-metafunctions)) q (8112 . 4)) ((c form c (c (? . 0) q render-metafunction)) q (23265 . 2)) ((c form c (c (? . 1) q with)) q (5066 . 2)) ((c form c (c (? . 0) q term->pict)) q (21669 . 2)) ((c def c (c (? . 1) q derivation-term)) c (? . 3)) ((c def c (c (? . 1) q struct:counterexample)) c (? . 7)) ((c form c (c (? . 0) q metafunction->pict)) q (23497 . 2)) ((c def c (c (? . 0) q set-lw-column-span!)) c (? . 4)) ((c def c (c (? . 0) q metafunction-style)) q (27408 . 4)) ((c def c (c (? . 0) q lw-unq?)) c (? . 4)) ((c form c (c (? . 1) q test-->)) q (8614 . 9)) ((c form c (c (? . 1) q define-judgment-form)) q (6063 . 45)) ((c def c (c (? . 2) q term-node-labels)) q (19002 . 3)) ((c form c (c (? . 1) q compatible-closure)) q (4003 . 2)) ((c def c (c (? . 1) q struct:derivation)) c (? . 3)) ((c def c (c (? . 1) q counterexample)) c (? . 7)) ((c def c (c (? . 0) q label-style)) q (26996 . 4)) ((c def c (c (? . 1) q derivation-name)) c (? . 3)) ((c def c (c (? . 0) q white-bracket-sizing)) q (29238 . 5)) ((c def c (c (? . 0) q label-font-size)) q (28017 . 4)) ((c form c (c (? . 0) q relation->pict)) q (23797 . 2)) ((c def c (c (? . 0) q render-reduction-relation-rules)) q (24165 . 11)) ((c form c (c (? . 1) q define-language)) q (1596 . 7)) ((c def c (c (? . 2) q traces)) q (12830 . 41)) ((c form c (c (? . 0) q metafunctions->pict)) q (23544 . 2)) ((c form c (c (? . 1) q define-extended-language)) q (1861 . 7)) ((c def c (c (? . 2) q derivation/ps)) q (18223 . 13)) ((c def c (c (? . 1) q default-check-attempts)) q (12444 . 4)) ((c def c (c (? . 0) q build-lw)) q (31090 . 10)) ((c def c (c (? . 1) q coverage?)) q (9319 . 3)) ((c def c (c (? . 1) q language-nts)) q (2268 . 3)) ((c def c (c (? . 0) q non-terminal-superscript-style)) q (27773 . 4)) ((c def c (c (? . 2) q stepper/seed)) q (17351 . 7)) ((c form c (c (? . 0) q render-metafunctions)) q (23371 . 2)) ((c def c (c (? . 1) q current-cache-all?)) q (4925 . 4)) ((c def c (c (? . 0) q render-reduction-relation)) q (22781 . 8)) ((c def c (c (? . 2) q dark-brush-color)) q (20489 . 4)) ((c def c (c (? . 2) q term-node-children)) q (18837 . 3)) ((c def c (c (? . 0) q default-style)) q (27912 . 4)) ((c form c (c (? . 1) q test-predicate)) q (9165 . 2)) ((c def c (c (? . 1) q default-attempt-size)) q (12359 . 3)) ((c def c (c (? . 0) q term->pict/pretty-write)) q (22015 . 9)) ((c def c (c (? . 2) q term-node-set-position!)) q (19493 . 5)) ((c def c (c (? . 0) q current-text)) q (28912 . 4)) ((c def c (c (? . 1) q apply-reduction-relation/tag-with-names)) q (4306 . 6)) ((c def c (c (? . 1) q match?)) q (142 . 3)) ((c def c (c (? . 0) q lw-metafunction?)) c (? . 4)) ((c form c (c (? . 1) q test-->>âˆƒ)) q (8839 . 10)) ((c def c (c (? . 1) q reduction-relation?)) q (4131 . 3)) ((c def c (c (? . 0) q set-lw-column!)) c (? . 4)) ((c form c (c (? . 1) q term-match/single)) q (1183 . 2)) ((c def c (c (? . 0) q set-arrow-pict!)) q (29139 . 4)) ((c def c (c (? . 1) q make-bind)) c (? . 5)) ((c form c (c (? . 1) q redex-check)) q (10177 . 18)) ((c def c (c (? . 1) q bind)) c (? . 5)) ((c def c (c (? . 2) q default-pretty-printer)) q (21423 . 6)) ((c form c (c (? . 0) q render-relation)) q (23597 . 2)) ((c def c (c (? . 0) q non-terminal-style)) q (27523 . 4)) ((c def c (c (? . 2) q term-node-set-red!)) q (19335 . 4)) ((c def c (c (? . 1) q struct:exn:fail:redex:test)) c (? . 6)) ((c def c (c (? . 0) q lw-column-span)) c (? . 4)) ((c form c (c (? . 1) q term)) q (663 . 3)) ((c def c (c (? . 2) q dark-text-color)) q (20966 . 4)) ((c def c (c (? . 1) q bind-name)) c (? . 5)) ((c def c (c (? . 0) q render-term/pretty-write)) q (21701 . 9)) ((c def c (c (? . 0) q reduction-relation-rule-separation)) q (28575 . 5)) ((c def c (c (? . 0) q render-language-nts)) q (23885 . 4)) ((c def c (c (? . 1) q make-exn:fail:redex:test)) c (? . 6)) ((c form c (c (? . 1) q -->)) q (5042 . 2)) ((c form c (c (? . 1) q test-equal)) q (8315 . 2)) ((c def c (c (? . 0) q lw-line)) c (? . 4)) ((c def c (c (? . 1) q union-reduction-relations)) q (3803 . 3)) ((c def c (c (? . 0) q rule-pict-style)) q (24661 . 4)) ((c def c (c (? . 2) q dark-pen-color)) q (20334 . 4)) ((c form c (c (? . 1) q define-extended-judgment-form)) q (7364 . 4)) ((c def c (c (? . 1) q exn:fail:redex:test)) c (? . 6)) ((c def c (c (? . 2) q term-node-y)) q (19705 . 3)) ((c def c (c (? . 0) q just-before)) q (31792 . 4)) ((c def c (c (? . 1) q variable-not-in)) q (1342 . 4)) ((c def c (c (? . 0) q make-lw)) c (? . 4)) ((c def c (c (? . 1) q reduction-relation->rule-names)) q (3904 . 3)) ((c form c (c (? . 1) q define-union-language)) q (2139 . 5)) ((c form c (c (? . 1) q fresh)) q (5053 . 2)) ((c def c (c (? . 0) q metafunction-pict-style)) q (25056 . 17)) ((c def c (c (? . 0) q lw)) c (? . 4)) ((c def c (c (? . 0) q extend-language-show-union)) q (24042 . 4)) ((c form c (c (? . 1) q redex-let*)) q (1014 . 2)) ((c form c (c (? . 0) q with-unquote-rewriter)) q (29844 . 2)) ((c def c (c (? . 1) q compiled-lang?)) q (2350 . 3)) ((c def c (c (? . 2) q pretty-print-parameters)) q (21282 . 4)) ((c def c (c (? . 0) q render-language)) q (22337 . 6)) ((c form c (c (? . 0) q to-lw)) q (31459 . 2)) ((c def c (c (? . 0) q set-lw-line!)) c (? . 4)) ((c form c (c (? . 1) q redex-match)) q (0 . 3)) ((c def c (c (? . 2) q term-node-x)) q (19644 . 3)) ((c form c (c (? . 1) q build-derivations)) q (7578 . 2)) ((c form c (c (? . 1) q term-let)) q (740 . 8)) ((c form c (c (? . 1) q generate-term)) q (9605 . 16)) ((c def c (c (? . 0) q paren-style)) q (27202 . 4)) ((c def c (c (? . 0) q lw?)) c (? . 4)) ((c def c (c (? . 2) q term-node-width)) q (19766 . 3)) ((c def c (c (? . 0) q metafunction-cases)) q (26054 . 9)) ((c form c (c (? . 1) q hole)) q (713 . 2)) ((c form c (c (? . 1) q in-domain?)) q (6011 . 2)) ((c def c (c (? . 1) q apply-reduction-relation*)) q (4516 . 10)) ((c def c (c (? . 2) q term-node-set-color!)) q (19097 . 4)) ((c form c (c (? . 1) q make-coverage)) q (9232 . 5)) ((c def c (c (? . 1) q counterexample?)) c (? . 7)) ((c form c (c (? . 1) q context-closure)) q (4071 . 2)) ((c def c (c (? . 1) q derivation)) c (? . 3)) ((c def c (c (? . 1) q make-counterexample)) c (? . 7)) ((c def c (c (? . 0) q metafunction-font-size)) q (28176 . 6)) ((c def c (c (? . 1) q derivation-subs)) c (? . 3)) ((c def c (c (? . 0) q linebreaks)) q (25917 . 4))))
syntax
(redex-matchÂ langÂ patternÂ any)
(redex-matchÂ langÂ pattern)
syntax
(redex-match?Â langÂ patternÂ any)
(redex-match?Â langÂ pattern)
procedure
(match?Â val)Â ->Â boolean?
Â Â valÂ :Â any/c
procedure
(match-bindingsÂ m)Â ->Â (listofÂ bind?)
Â Â mÂ :Â match?
struct
(structÂ bindÂ (name exp)
Â       Â #:extra-constructor-nameÂ make-bind)
Â Â nameÂ :Â symbol?
Â Â expÂ :Â any/c
parameter
(caching-enabled?)Â ->Â boolean?
(caching-enabled?Â on?)Â ->Â void?
Â Â on?Â :Â boolean?
procedure
(set-cache-size!Â size)Â ->Â void?
Â Â sizeÂ :Â positive-integer?
parameter
(check-redudancy)Â ->Â boolean?
(check-redudancyÂ check?)Â ->Â void?
Â Â check?Â :Â boolean?
syntax
(termÂ term)
(termÂ termÂ #:langÂ lang-id)
syntax
hole
syntax
in-hole
syntax
(term-letÂ ([tl-patÂ expr]Â ...)Â body)
Â 
tl-pat    Â =Â identifier
Â          Â |Â (tl-pat-eleÂ ...)
Â          Â Â Â Â 
tl-pat-eleÂ =Â tl-pat
Â          Â |Â tl-patÂ ...Â ;Â a literal ellipsis
syntax
(redex-letÂ languageÂ ([patternÂ expression]Â ...)Â bodyÂ ...+)
syntax
(redex-let*Â languageÂ ([patternÂ expression]Â ...)Â bodyÂ ...+)
syntax
(define-termÂ identifierÂ term)
syntax
(term-matchÂ languageÂ [patternÂ expression]Â ...)
syntax
(term-match/singleÂ languageÂ [patternÂ expression]Â ...)
procedure
(plugÂ contextÂ expression)Â ->Â any
Â Â contextÂ :Â any/c
Â Â expressionÂ :Â any/c
procedure
(variable-not-inÂ tÂ var)Â ->Â symbol?
Â Â tÂ :Â any/c
Â Â varÂ :Â symbol?
procedure
(variables-not-inÂ tÂ vars)Â ->Â (listofÂ symbol?)
Â Â tÂ :Â any/c
Â Â varsÂ :Â (listofÂ symbol?)
procedure
(exn:fail:redex?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
syntax
(define-languageÂ lang-name
Â Â non-terminal-defÂ ...)
Â 
non-terminal-defÂ =Â (non-terminal-nameÂ ...+Â ::=Â patternÂ ...+)
Â                Â |Â (non-terminal-nameÂ patternÂ ...+)
Â                Â |Â ((non-terminal-nameÂ ...+)Â patternÂ ...+)
syntax
::=
syntax
(define-extended-languageÂ extended-langÂ base-lang
Â Â non-terminal-defÂ ...)
Â 
non-terminal-defÂ =Â (non-terminal-nameÂ ...+Â ::=Â patternÂ ...+)
Â                Â |Â (non-terminal-nameÂ patternÂ ...+)
Â                Â |Â ((non-terminal-nameÂ ...+)Â patternÂ ...+)
syntax
(define-union-languageÂ LÂ base/prefix-langÂ ...)
Â 
base/prefix-langÂ =Â lang-id
Â                Â |Â (prefixÂ lang-id)
procedure
(language-ntsÂ lang)Â ->Â (listofÂ symbol?)
Â Â langÂ :Â compiled-lang?
procedure
(compiled-lang?Â l)Â ->Â boolean?
Â Â lÂ :Â any/c
syntax
(reduction-relationÂ languageÂ domainÂ base-arrow
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â reduction-caseÂ ...
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â shortcuts)
Â 
domain        Â =Â 
Â              Â |Â #:domainÂ pattern
Â              Â Â Â Â 
base-arrow    Â =Â 
Â              Â |Â #:arrowÂ base-arrow-name
Â              Â Â Â Â 
reduction-caseÂ =Â (arrow-nameÂ patternÂ termÂ red-extrasÂ ...)
Â              Â Â Â Â 
red-extras    Â =Â rule-name
Â              Â |Â (freshÂ fresh-clauseÂ ...)
Â              Â |Â (side-conditionÂ racket-expression)
Â              Â |Â (whereÂ patternÂ term)
Â              Â |Â (judgment-holdsÂ (judgment-form-idÂ pat/termÂ ...))
Â              Â |Â (side-condition/hiddenÂ racket-expression)
Â              Â |Â (where/hiddenÂ patternÂ term)
Â              Â Â Â Â 
shortcuts     Â =Â 
Â              Â |Â withÂ shortcutÂ ...
Â              Â Â Â Â 
shortcut      Â =Â [(old-arrow-nameÂ patternÂ term)
                 Â (new-arrow-nameÂ identifierÂ identifier)]
Â              Â Â Â Â 
rule-name     Â =Â identifier
Â              Â |Â string
Â              Â |Â (computed-nameÂ racket-expression)
Â              Â Â Â Â 
fresh-clause  Â =Â var
Â              Â |Â ((var1Â ...)Â (var2Â ...))
Â              Â Â Â Â 
pat/term      Â =Â pattern
Â              Â |Â term
syntax
(extend-reduction-relationÂ reduction-relationÂ languageÂ moreÂ ...)
procedure
(union-reduction-relationsÂ rÂ ...)Â ->Â reduction-relation?
Â Â rÂ :Â reduction-relation?
procedure
(reduction-relation->rule-namesÂ r)Â ->Â (listofÂ symbol?)
Â Â rÂ :Â reduction-relation?
syntax
(compatible-closureÂ reduction-relationÂ langÂ non-terminal)
syntax
(context-closureÂ reduction-relationÂ langÂ pattern)
procedure
(reduction-relation?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(apply-reduction-relationÂ rÂ t)Â ->Â (listofÂ any/c)
Â Â rÂ :Â reduction-relation?
Â Â tÂ :Â any/c
procedure
(apply-reduction-relation/tag-with-namesÂ r Â 
Â                                        Â t)Â 
Â ->Â (listofÂ (list/cÂ (unionÂ false/cÂ string?)Â any/c))
Â Â rÂ :Â reduction-relation?
Â Â tÂ :Â any/c
procedure
(apply-reduction-relation*Â  r                      Â 
Â                          Â  t                      Â 
Â                          Â [#:cache-all?Â cache-all?Â 
Â                          Â  #:stop-whenÂ stop-when])Â 
Â ->Â (listofÂ any/c)
Â Â rÂ :Â reduction-relation?
Â Â tÂ :Â any/c
Â Â cache-all?Â :Â boolean?Â =Â (current-cache-all?)
Â Â stop-whenÂ :Â (->Â any/cÂ any)Â =Â (Î»Â (x)Â #f)
parameter
(current-cache-all?)Â ->Â boolean?
(current-cache-all?Â cache-all?)Â ->Â void?
Â Â cache-all?Â :Â boolean?
syntax
-->
syntax
fresh
syntax
with
syntax
(define-metafunctionÂ language
Â Â metafunction-contract
Â Â [(nameÂ patternÂ ...)Â termÂ metafunction-extrasÂ ...]
Â Â ...)
Â 
metafunction-contractÂ =Â 
Â                     Â |Â idÂ :Â patternÂ ...Â ->Â range
Â                     Â Â Â Â 
range                Â =Â pattern
Â                     Â |Â patternÂ orÂ range
Â                     Â |Â patternÂ âˆ¨Â range
Â                     Â |Â patternÂ âˆªÂ range
Â                     Â Â Â Â 
metafunction-extras  Â =Â (side-conditionÂ racket-expression)
Â                     Â |Â (side-condition/hiddenÂ racket-expression)
Â                     Â |Â (whereÂ patÂ term)
Â                     Â |Â (where/hiddenÂ patÂ term)
Â                     Â |Â (judgment-holds
                        Â (judgment-form-idÂ pat/termÂ ...))
syntax
(define-metafunction/extensionÂ fÂ language
Â Â metafunction-contract
Â Â [(gÂ patternÂ ...)Â termÂ metafunction-extrasÂ ...]
Â Â ...)
syntax
(in-domain?Â (metafunction-nameÂ termÂ ...))
syntax
(define-judgment-formÂ language
Â Â mode-spec
Â Â contract-spec
Â Â ruleÂ ruleÂ ...)
Â 
mode-spec     Â =Â #:modeÂ (form-idÂ pos-useÂ ...)
Â              Â Â Â Â 
contract-spec Â =Â 
Â              Â |Â #:contractÂ (form-idÂ patternÂ ...)
Â              Â Â Â Â 
pos-use       Â =Â I
Â              Â |Â O
Â              Â Â Â Â 
rule          Â =Â [premise
                 Â ...
                 Â dashesÂ rule-name
                 Â conclusion]
Â              Â |Â [conclusion
                 Â premise
                 Â ...
                 Â rule-name]
Â              Â Â Â Â 
conclusion    Â =Â (form-idÂ pat/termÂ ...)
Â              Â Â Â Â 
premise       Â =Â (judgment-form-idÂ pat/termÂ ...)Â maybe-ellipsis
Â              Â |Â (whereÂ patternÂ term)
Â              Â |Â (where/hiddenÂ patternÂ term)
Â              Â |Â (side-conditionÂ term)
Â              Â |Â (side-condition/hiddenÂ term)
Â              Â Â Â Â 
rule-name     Â =Â 
Â              Â |Â string
Â              Â |Â non-ellipsis-non-hypens-var
Â              Â Â Â Â 
pat/term      Â =Â pattern
Â              Â |Â term
Â              Â Â Â Â 
maybe-ellipsisÂ =Â 
Â              Â |Â ...
Â              Â Â Â Â 
dashes        Â =Â ---
Â              Â |Â ----
Â              Â |Â -----
Â              Â |Â etc.
syntax
(define-extended-judgment-formÂ languageÂ judgment-form-id
Â Â optionÂ ...
Â Â ruleÂ ...)
syntax
(judgment-holdsÂ judgment)
(judgment-holdsÂ judgmentÂ term)
Â 
judgmentÂ =Â (judgment-form-idÂ pat/termÂ ...)
syntax
(build-derivationsÂ judgment)
struct
(structÂ derivationÂ (term name subs)
Â       Â #:extra-constructor-nameÂ make-derivation)
Â Â termÂ :Â any/c
Â Â nameÂ :Â (or/cÂ string?Â #f)
Â Â subsÂ :Â (listofÂ derivation?)
syntax
I
syntax
O
syntax
(define-relationÂ language
Â Â relation-contract
Â Â [(nameÂ patternÂ ...)
Â Â Â termÂ ...
Â Â Â metafunction-extrasÂ ...]Â ...)
Â 
relation-contractÂ =Â 
Â                 Â |Â form-idÂ âŠ‚Â patternÂ xÂ ...Â xÂ pattern
Â                 Â |Â form-idÂ âŠ†Â patternÂ Ã—Â ...Â Ã—Â pattern
parameter
(current-traced-metafunctions)Â ->Â (or/cÂ 'allÂ (listofÂ symbol?))
(current-traced-metafunctionsÂ traced-metafunctions)Â ->Â void?
Â Â traced-metafunctionsÂ :Â (or/cÂ 'allÂ (listofÂ symbol?))
syntax
(test-equalÂ e1Â e2)
syntax
(test-->>Â rel-exprÂ optionÂ ...Â e1-exprÂ e2-exprÂ ...)
Â 
optionÂ =Â #:cycles-ok
Â      Â |Â #:equivÂ pred-expr
Â      Â |Â #:predÂ pred-expr
Â 
Â Â rel-exprÂ :Â reduction-relation?
Â Â pred-exprÂ :Â (-->Â any/cÂ any)
Â Â e1-exprÂ :Â any/c
Â Â e2-exprÂ :Â any/c
syntax
(test-->Â rel-exprÂ optionÂ ...Â e1-exprÂ e2-exprÂ ...)
Â 
optionÂ =Â #:equivÂ pred-expr
Â 
Â Â rel-exprÂ :Â reduction-relation?
Â Â pred-exprÂ :Â (-->Â any/cÂ any/cÂ any/c)
Â Â e1-exprÂ :Â any/c
Â Â e2-exprÂ :Â any/c
syntax
(test-->>âˆƒÂ optionÂ ...Â rel-exprÂ start-exprÂ goal-expr)
Â 
optionÂ =Â #:stepsÂ steps-expr
Â 
Â Â rel-exprÂ :Â reduction-relation?
Â Â start-exprÂ :Â any/c
Â Â goal-exprÂ :Â (or/cÂ (->Â any/cÂ any/c)
              Â Â Â Â Â Â (not/cÂ procedure?))
Â Â steps-exprÂ :Â (or/cÂ natural-number/cÂ +inf.0)
syntax
test-->>E
syntax
(test-predicateÂ p?Â e)
procedure
(test-results)Â ->Â void?
syntax
(make-coverageÂ subject)
Â 
subjectÂ =Â metafunction
Â       Â |Â relation-expr
procedure
(coverage?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(relation-coverage)Â ->Â (listofÂ coverage?)
(relation-coverageÂ tracked)Â ->Â void?
Â Â trackedÂ :Â (listofÂ coverage?)
procedure
(covered-casesÂ c)Â ->Â (listofÂ (cons/cÂ string?Â natural-number/c))
Â Â cÂ :Â coverage?
syntax
(generate-termÂ term-specÂ size-exprÂ kw-argsÂ ...)
(generate-termÂ term-spec)
Â 
term-specÂ =Â languageÂ pattern
Â         Â |Â languageÂ #:satisfyingÂ (judgment-form-idÂ patternÂ ...)
Â         Â |Â languageÂ #:satisfyingÂ (metafunction-idÂ patternÂ ...)Â =Â pattern
Â         Â |Â #:sourceÂ metafunction
Â         Â |Â #:sourceÂ relation-expr
Â         Â Â Â Â 
kw-args  Â =Â #:attempt-numÂ attempts-expr
Â         Â |Â #:retriesÂ retries-expr
Â 
Â Â size-exprÂ :Â natural-number/c
Â Â attempt-num-exprÂ :Â natural-number/c
Â Â retries-exprÂ :Â natural-number/c
syntax
(redex-checkÂ languageÂ patternÂ property-exprÂ kw-argÂ ...)
Â 
kw-argÂ =Â #:attemptsÂ attempts-expr
Â      Â |Â #:sourceÂ metafunction
Â      Â |Â #:sourceÂ relation-expr
Â      Â |Â #:retriesÂ retries-expr
Â      Â |Â #:print?Â print?-expr
Â      Â |Â #:attempt-sizeÂ attempt-size-expr
Â      Â |Â #:prepareÂ prepare-expr
Â 
Â Â property-exprÂ :Â any/c
Â Â attempts-exprÂ :Â natural-number/c
Â Â relation-exprÂ :Â reduction-relation?
Â Â retries-exprÂ :Â natural-number/c
Â Â print?-exprÂ :Â any/c
Â Â attempt-size-exprÂ :Â (->Â natural-number/cÂ natural-number/c)
Â Â prepare-exprÂ :Â (->Â any/cÂ any/c)
syntax
(redex-generatorÂ language-idÂ satisfyingÂ size-expr)
Â 
satisfyingÂ =Â (judgment-form-idÂ patternÂ ...)
Â          Â |Â (metafunction-idÂ patternÂ ...)Â =Â pattern
Â 
Â Â size-exprÂ :Â natural-number/c
struct
(structÂ counterexampleÂ (term)
Â       Â #:extra-constructor-nameÂ make-counterexample
Â       Â #:transparent)
Â Â termÂ :Â any/c
struct
(structÂ exn:fail:redex:testÂ exn:fail:redexÂ (source term)
Â       Â #:extra-constructor-nameÂ make-exn:fail:redex:test)
Â Â sourceÂ :Â exn:fail?
Â Â termÂ :Â any/c
syntax
(check-reduction-relationÂ relationÂ propertyÂ kw-argsÂ ...)
Â 
kw-argÂ =Â #:attemptsÂ attempts-expr
Â      Â |Â #:retriesÂ retries-expr
Â      Â |Â #:print?Â print?-expr
Â      Â |Â #:attempt-sizeÂ attempt-size-expr
Â      Â |Â #:prepareÂ prepare-expr
Â 
Â Â propertyÂ :Â (->Â any/cÂ any/c)
Â Â attempts-exprÂ :Â natural-number/c
Â Â retries-exprÂ :Â natural-number/c
Â Â print?-exprÂ :Â any/c
Â Â attempt-size-exprÂ :Â (->Â natural-number/cÂ natural-number/c)
Â Â prepare-exprÂ :Â (->Â any/cÂ any/c)
syntax
(check-metafunctionÂ metafunctionÂ propertyÂ kw-argsÂ ...)
Â 
kw-argÂ =Â #:attemptsÂ attempts-expr
Â      Â |Â #:retriesÂ retries-expr
Â      Â |Â #:print?Â print?-expr
Â      Â |Â #:attempt-sizeÂ attempt-size-expr
Â      Â |Â #:prepareÂ prepare-expr
Â 
Â Â propertyÂ :Â (->Â (listofÂ any/c)Â any/c)
Â Â attempts-exprÂ :Â natural-number/c
Â Â retries-exprÂ :Â natural-number/c
Â Â print?-exprÂ :Â any/c
Â Â attempt-size-exprÂ :Â (->Â natural-number/cÂ natural-number/c)
Â Â prepare-exprÂ :Â (->Â (listofÂ any/c)Â (listofÂ any/c))
procedure
(default-attempt-sizeÂ n)Â ->Â natural-number/c
Â Â nÂ :Â natural-number/c
parameter
(default-check-attempts)Â ->Â natural-number/c
(default-check-attemptsÂ attempts)Â ->Â void?
Â Â attemptsÂ :Â natural-number/c
parameter
(redex-pseudo-random-generator)Â ->Â pseudo-random-generator?
(redex-pseudo-random-generatorÂ generator)Â ->Â void?
Â Â generatorÂ :Â pseudo-random-generator?
procedure
(exn:fail:redex:generation-failure?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(tracesÂ  reductions                                       Â 
Â       Â  expr                                             Â 
Â       Â [#:multiple?Â multiple?                            Â 
Â       Â  #:predÂ pred                                      Â 
Â       Â  #:ppÂ pp                                          Â 
Â       Â  #:colorsÂ colors                                  Â 
Â       Â  #:racket-colors?Â racket-colors?                  Â 
Â       Â  #:scheme-colors?Â scheme-colors?                  Â 
Â       Â  #:filterÂ term-filter                             Â 
Â       Â  #:x-spacingÂ x-spacing                            Â 
Â       Â  #:y-spacingÂ y-spacing                            Â 
Â       Â  #:layoutÂ layout                                  Â 
Â       Â  #:edge-labels?Â edge-labels?                      Â 
Â       Â  #:edge-label-fontÂ edge-label-font                Â 
Â       Â  #:graph-pasteboard-mixinÂ graph-pasteboard-mixin])Â 
Â ->Â void?
Â Â reductionsÂ :Â reduction-relation?
Â Â exprÂ :Â (or/cÂ any/cÂ (listofÂ any/c))
Â Â multiple?Â :Â boolean?Â =Â #f
Â Â predÂ :Â (or/cÂ (->Â sexpÂ any)            Â =Â (Î»Â (x)Â #t)
         Â Â Â Â Â Â (->Â sexpÂ term-node?Â any))
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
Â Â colorsÂ :Â (listof
           Â (cons/cÂ string?
           Â Â Â Â Â Â Â Â Â (and/cÂ (listofÂ (or/cÂ string?Â (is-a?/cÂ color%)))
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (Î»Â (x)Â (<=Â 0Â (lengthÂ x)Â 6)))))
Â  Â      Â =Â '()
Â Â racket-colors?Â :Â boolean?Â =Â #t
Â Â scheme-colors?Â :Â boolean?Â =Â racket-colors?
Â Â term-filterÂ :Â (->Â any/cÂ (or/cÂ #fÂ string?)Â any/c)
Â  Â           Â =Â (Î»Â (xÂ y)Â #t)
Â Â x-spacingÂ :Â number?Â =Â 15
Â Â y-spacingÂ :Â number?Â =Â 15
Â Â layoutÂ :Â (->Â (listofÂ term-node?)Â void?)Â =Â void
Â Â edge-labels?Â :Â boolean?Â =Â #t
Â Â edge-label-fontÂ :Â (or/cÂ #fÂ (is-a?/cÂ font%))Â =Â #f
Â Â graph-pasteboard-mixinÂ :Â (make-mixin-contractÂ graph-pasteboard<%>)
Â  Â                      Â =Â values
procedure
(traces/psÂ  reductions                                      Â 
Â          Â  expr                                            Â 
Â          Â  file                                            Â 
Â          Â [#:multiple?Â multiple?                           Â 
Â          Â  #:predÂ pred                                     Â 
Â          Â  #:ppÂ pp                                         Â 
Â          Â  #:colorsÂ colors                                 Â 
Â          Â  #:filterÂ term-filter                            Â 
Â          Â  #:layoutÂ layout                                 Â 
Â          Â  #:x-spacingÂ x-spacing                           Â 
Â          Â  #:y-spacingÂ y-spacing                           Â 
Â          Â  #:edge-labels?Â edge-labels?                     Â 
Â          Â  #:edge-label-fontÂ edge-label-font               Â 
Â          Â  #:graph-pasteboard-mixinÂ graph-pasteboard-mixin]Â 
Â          Â  #:post-processÂ post-process)                    Â 
Â ->Â void?
Â Â reductionsÂ :Â reduction-relation?
Â Â exprÂ :Â (or/cÂ any/cÂ (listofÂ any/c))
Â Â fileÂ :Â (or/cÂ path-string?Â path?)
Â Â multiple?Â :Â boolean?Â =Â #f
Â Â predÂ :Â (or/cÂ (->Â sexpÂ any)            Â =Â (Î»Â (x)Â #t)
         Â Â Â Â Â Â (->Â sexpÂ term-node?Â any))
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
Â Â colorsÂ :Â (listof
           Â (cons/cÂ string?
           Â Â Â Â Â Â Â Â Â (and/cÂ (listofÂ (or/cÂ string?Â (is-a?/cÂ color%)))
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (Î»Â (x)Â (<=Â 0Â (lengthÂ x)Â 6)))))
Â  Â      Â =Â '()
Â Â term-filterÂ :Â (->Â any/cÂ (or/cÂ #fÂ string?)Â any/c)
Â  Â           Â =Â (Î»Â (xÂ y)Â #t)
Â Â layoutÂ :Â (->Â (listofÂ term-node?)Â void?)Â =Â void
Â Â x-spacingÂ :Â number?Â =Â 15
Â Â y-spacingÂ :Â number?Â =Â 15
Â Â edge-labels?Â :Â boolean?Â =Â #t
Â Â edge-label-fontÂ :Â (or/cÂ #fÂ (is-a?/cÂ font%))Â =Â #f
Â Â graph-pasteboard-mixinÂ :Â (make-mixin-contractÂ graph-pasteboard<%>)
Â  Â                      Â =Â values
Â Â post-processÂ :Â (->Â (is-a?/cÂ graph-pasteboard<%>)Â any/c)
procedure
(stepperÂ reductionsÂ tÂ [pp])Â ->Â void?
Â Â reductionsÂ :Â reduction-relation?
Â Â tÂ :Â any/c
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
procedure
(stepper/seedÂ reductionsÂ seedÂ [pp])Â ->Â void?
Â Â reductionsÂ :Â reduction-relation?
Â Â seedÂ :Â (cons/cÂ any/cÂ (listofÂ any/c))
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
procedure
(show-derivationsÂ  derivations                        Â Â  Â Â 
Â                 Â [#:ppÂ pp                            Â Â  Â Â 
Â                 Â  #:racket-colors?Â racket-colors?    Â Â  Â Â 
Â                 Â  #:init-derivationÂ init-derivation])Â ->Â any
Â Â derivationsÂ :Â (cons/cÂ derivation?Â (listofÂ derivation?))
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
Â Â racket-colors?Â :Â boolean?Â =Â #f
Â Â init-derivationÂ :Â exact-nonnegative-integer?Â =Â 0
procedure
(derivation/psÂ  derivation                      Â Â  Â Â 
Â              Â  filename                        Â Â  Â Â 
Â              Â [#:ppÂ pp                         Â Â  Â Â 
Â              Â  #:racket-colors?Â racket-colors?]Â Â  Â Â 
Â              Â  #:post-processÂ post-process)    Â ->Â void?
Â Â derivationÂ :Â derivation?
Â Â filenameÂ :Â path-string?
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
Â Â racket-colors?Â :Â boolean?Â =Â #f
Â Â post-processÂ :Â (->Â (is-a?/cÂ pasteboard%)Â any)
procedure
(term-node-childrenÂ tn)Â ->Â (listofÂ term-node?)
Â Â tnÂ :Â term-node?
procedure
(term-node-parentsÂ tn)Â ->Â (listofÂ term-node?)
Â Â tnÂ :Â term-node?
procedure
(term-node-labelsÂ tn)Â ->Â (listofÂ (or/cÂ false/cÂ string?))
Â Â tnÂ :Â term-node?
procedure
(term-node-set-color!Â tnÂ color)Â ->Â void?
Â Â tnÂ :Â term-node?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color%)Â false/c)
procedure
(term-node-colorÂ tn)Â ->Â (or/cÂ string?Â (is-a?/cÂ color%)Â false/c)
Â Â tnÂ :Â term-node?
procedure
(term-node-set-red!Â tnÂ red?)Â ->Â void?
Â Â tnÂ :Â term-node?
Â Â red?Â :Â boolean?
procedure
(term-node-exprÂ tn)Â ->Â any
Â Â tnÂ :Â term-node?
procedure
(term-node-set-position!Â tnÂ xÂ y)Â ->Â void?
Â Â tnÂ :Â term-node?
Â Â xÂ :Â (and/cÂ real?Â positive?)
Â Â yÂ :Â (and/cÂ real?Â positive?)
procedure
(term-node-xÂ tn)Â ->Â real?
Â Â tnÂ :Â term-node?
procedure
(term-node-yÂ tn)Â ->Â real?
Â Â tnÂ :Â term-node?
procedure
(term-node-widthÂ tn)Â ->Â real?
Â Â tnÂ :Â term-node?
procedure
(term-node-heightÂ tn)Â ->Â real?
Â Â tnÂ :Â term-node?
procedure
(term-node?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(reduction-steps-cutoff)Â ->Â number?
(reduction-steps-cutoffÂ cutoff)Â ->Â void?
Â Â cutoffÂ :Â number?
parameter
(initial-font-size)Â ->Â number?
(initial-font-sizeÂ size)Â ->Â void?
Â Â sizeÂ :Â number?
parameter
(initial-char-width)Â ->Â (or/cÂ number?Â (->Â any/cÂ number?))
(initial-char-widthÂ width)Â ->Â void?
Â Â widthÂ :Â (or/cÂ number?Â (->Â any/cÂ number?))
parameter
(dark-pen-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(dark-pen-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(dark-brush-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(dark-brush-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(light-pen-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(light-pen-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(light-brush-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(light-brush-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(dark-text-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(dark-text-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(light-text-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(light-text-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(pretty-print-parameters)Â ->Â (->Â (->Â any/c)Â any/c)
(pretty-print-parametersÂ f)Â ->Â void?
Â Â fÂ :Â (->Â (->Â any/c)Â any/c)
procedure
(default-pretty-printerÂ vÂ portÂ widthÂ text)Â ->Â void?
Â Â vÂ :Â any/c
Â Â portÂ :Â output-port?
Â Â widthÂ :Â exact-nonnegative-integer?
Â Â textÂ :Â (is-a?/cÂ text%)
syntax
(render-termÂ langÂ term)
(render-termÂ langÂ termÂ file)
syntax
(term->pictÂ langÂ term)
procedure
(render-term/pretty-writeÂ lang          Â Â  Â Â 
Â                         Â term          Â Â  Â Â 
Â                         Â filename      Â Â  Â Â 
Â                         Â #:widthÂ width)Â ->Â void?
Â Â langÂ :Â compiled-lang?
Â Â termÂ :Â any/c
Â Â filenameÂ :Â path-string?
Â Â widthÂ :Â #f
procedure
(term->pict/pretty-writeÂ lang          Â Â  Â Â 
Â                        Â term          Â Â  Â Â 
Â                        Â filename      Â Â  Â Â 
Â                        Â #:widthÂ width)Â ->Â pict?
Â Â langÂ :Â compiled-lang?
Â Â termÂ :Â any/c
Â Â filenameÂ :Â (or/cÂ path-string?Â #f)
Â Â widthÂ :Â #f
procedure
(render-languageÂ langÂ [fileÂ #:ntsÂ nts])Â ->Â (ifÂ fileÂ void?Â pict?)
Â Â langÂ :Â compiled-lang?
Â Â fileÂ :Â (or/cÂ false/cÂ path-string?)Â =Â #f
Â Â ntsÂ :Â (or/cÂ false/cÂ (listofÂ (or/cÂ string?Â symbol?)))
Â  Â   Â =Â (render-language-nts)
procedure
(language->pictÂ langÂ [#:ntsÂ nts])Â ->Â pict?
Â Â langÂ :Â compiled-lang?
Â Â ntsÂ :Â (or/cÂ false/cÂ (listofÂ (or/cÂ string?Â symbol?)))
Â  Â   Â =Â (render-language-nts)
procedure
(render-reduction-relationÂ  rel            Â 
Â                          Â [file           Â 
Â                          Â  #:styleÂ style])Â 
Â ->Â (ifÂ fileÂ void?Â pict?)
Â Â relÂ :Â reduction-relation?
Â Â fileÂ :Â (or/cÂ false/cÂ path-string?)Â =Â #f
Â Â styleÂ :Â reduction-rule-style/cÂ =Â (rule-pict-style)
procedure
(reduction-relation->pictÂ rÂ [#:styleÂ style])Â ->Â pict?
Â Â rÂ :Â reduction-relation?
Â Â styleÂ :Â reduction-rule-style/cÂ =Â (rule-pict-style)
syntax
(render-metafunctionÂ metafunction-name)
syntax
(render-metafunctionÂ metafunction-nameÂ filename)
syntax
(render-metafunctionsÂ metafunction-nameÂ ...)
syntax
(render-metafunctionsÂ metafunction-nameÂ ...Â #:fileÂ filename)
syntax
(metafunction->pictÂ metafunction-name)
syntax
(metafunctions->pictÂ metafunction-nameÂ ...)
syntax
(render-relationÂ relation-name)
syntax
(render-relationÂ relation-nameÂ filename)
syntax
(render-judgment-formÂ judgment-form-name)
syntax
(render-judgment-formÂ judgment-form-nameÂ filename)
syntax
(relation->pictÂ relation-name)
syntax
(judgment-form->pictÂ judgment-form-name)
parameter
(render-language-nts)Â ->Â (or/cÂ false/cÂ (listofÂ symbol?))
(render-language-ntsÂ nts)Â ->Â void?
Â Â ntsÂ :Â (or/cÂ false/cÂ (listofÂ symbol?))
parameter
(extend-language-show-union)Â ->Â boolean?
(extend-language-show-unionÂ show?)Â ->Â void?
Â Â show?Â :Â boolean?
parameter
(render-reduction-relation-rules)
Â ->Â (or/cÂ false/c
    Â Â Â Â Â Â (listofÂ (or/cÂ symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)))
(render-reduction-relation-rulesÂ rules)Â ->Â void?
Â Â rulesÂ :Â (or/cÂ false/c
          Â Â Â Â Â Â (listofÂ (or/cÂ symbol?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)))
parameter
(rule-pict-style)Â ->Â reduction-rule-style/c
(rule-pict-styleÂ style)Â ->Â void?
Â Â styleÂ :Â reduction-rule-style/c
value
reduction-rule-style/cÂ :Â flat-contract?
parameter
(arrow-space)Â ->Â natural-number/c
(arrow-spaceÂ space)Â ->Â void?
Â Â spaceÂ :Â natural-number/c
parameter
(label-space)Â ->Â natural-number/c
(label-spaceÂ space)Â ->Â void?
Â Â spaceÂ :Â natural-number/c
parameter
(metafunction-pict-style)
Â ->Â (or/cÂ 'left-right
    Â Â Â Â Â Â 'up-down
    Â Â Â Â Â Â 'left-right/vertical-side-conditions
    Â Â Â Â Â Â 'up-down/vertical-side-conditions
    Â Â Â Â Â Â 'left-right/compact-side-conditions
    Â Â Â Â Â Â 'up-down/compact-side-conditions
    Â Â Â Â Â Â 'left-right/beside-side-conditions)
(metafunction-pict-styleÂ style)Â ->Â void?
Â Â styleÂ :Â (or/cÂ 'left-right
          Â Â Â Â Â Â 'up-down
          Â Â Â Â Â Â 'left-right/vertical-side-conditions
          Â Â Â Â Â Â 'up-down/vertical-side-conditions
          Â Â Â Â Â Â 'left-right/compact-side-conditions
          Â Â Â Â Â Â 'up-down/compact-side-conditions
          Â Â Â Â Â Â 'left-right/beside-side-conditions)
parameter
(delimit-ellipsis-arguments?)Â ->Â any/c
(delimit-ellipsis-arguments?Â delimit?)Â ->Â void?
Â Â delimit?Â :Â any/c
parameter
(linebreaks)Â ->Â (or/cÂ #fÂ (listofÂ boolean?))
(linebreaksÂ breaks)Â ->Â void?
Â Â breaksÂ :Â (or/cÂ #fÂ (listofÂ boolean?))
parameter
(metafunction-cases)
Â ->Â (or/cÂ #fÂ (and/cÂ (listofÂ (and/cÂ integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ zero?Â positive?)))
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â pair?))
(metafunction-casesÂ cases)Â ->Â void?
Â Â casesÂ :Â (or/cÂ #fÂ (and/cÂ (listofÂ (and/cÂ integer?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ zero?Â positive?)))
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â pair?))
parameter
(judgment-form-cases)
Â ->Â (or/cÂ #f
    Â Â Â Â Â Â (and/cÂ (listofÂ (or/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?))
    Â Â Â Â Â Â Â Â Â Â Â Â Â pair?))
(judgment-form-casesÂ cases)Â ->Â void?
Â Â casesÂ :Â (or/cÂ #f
          Â Â Â Â Â Â (and/cÂ (listofÂ (or/cÂ exact-nonnegative-integer?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?))
          Â Â Â Â Â Â Â Â Â Â Â Â Â pair?))
parameter
(label-style)Â ->Â text-style/c
(label-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(grammar-style)Â ->Â text-style/c
(grammar-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(paren-style)Â ->Â text-style/c
(paren-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(literal-style)Â ->Â text-style/c
(literal-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(metafunction-style)Â ->Â text-style/c
(metafunction-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(non-terminal-style)Â ->Â text-style/c
(non-terminal-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(non-terminal-subscript-style)Â ->Â text-style/c
(non-terminal-subscript-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(non-terminal-superscript-style)Â ->Â text-style/c
(non-terminal-superscript-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(default-style)Â ->Â text-style/c
(default-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(label-font-size)Â ->Â (and/cÂ (between/cÂ 1Â 255)Â integer?)
(label-font-sizeÂ size)Â ->Â void?
Â Â sizeÂ :Â (and/cÂ (between/cÂ 1Â 255)Â integer?)
parameter
(metafunction-font-size)Â ->Â (and/cÂ (between/cÂ 1Â 255)
                            Â Â Â Â Â Â Â integer?)
(metafunction-font-sizeÂ size)Â ->Â void?
Â Â sizeÂ :Â (and/cÂ (between/cÂ 1Â 255)
         Â Â Â Â Â Â Â integer?)
parameter
(default-font-size)Â ->Â (and/cÂ (between/cÂ 1Â 255)Â integer?)
(default-font-sizeÂ size)Â ->Â void?
Â Â sizeÂ :Â (and/cÂ (between/cÂ 1Â 255)Â integer?)
parameter
(reduction-relation-rule-separation)
Â ->Â (parameter/cÂ (and/cÂ integer?Â positive?Â exact?))
(reduction-relation-rule-separationÂ sep)Â ->Â void?
Â Â sepÂ :Â (parameter/cÂ (and/cÂ integer?Â positive?Â exact?))
parameter
(curly-quotes-for-strings)Â ->Â boolean?
(curly-quotes-for-stringsÂ on?)Â ->Â void?
Â Â on?Â :Â boolean?
parameter
(current-text)Â ->Â (->Â string?Â text-style/cÂ number?Â pict?)
(current-textÂ proc)Â ->Â void?
Â Â procÂ :Â (->Â string?Â text-style/cÂ number?Â pict?)
procedure
(arrow->pictÂ arrow)Â ->Â pict?
Â Â arrowÂ :Â symbol?
procedure
(set-arrow-pict!Â arrowÂ proc)Â ->Â void?
Â Â arrowÂ :Â symbol?
Â Â procÂ :Â (->Â pict?)
parameter
(white-bracket-sizing)
Â ->Â (->Â string?Â number?Â (valuesÂ number?Â number?Â number?Â number?))
(white-bracket-sizingÂ proc)Â ->Â void?
Â Â procÂ :Â (->Â string?Â number?Â (valuesÂ number?Â number?Â number?Â number?))
parameter
(horizontal-bar-spacing)
Â ->Â (parameter/cÂ exact-nonnegative-integer?)
(horizontal-bar-spacingÂ space)Â ->Â void?
Â Â spaceÂ :Â (parameter/cÂ exact-nonnegative-integer?)
parameter
(relation-clauses-combine)
Â ->Â (parameter/cÂ (->Â (listofÂ pict?)Â pict?))
(relation-clauses-combineÂ combine)Â ->Â void?
Â Â combineÂ :Â (parameter/cÂ (->Â (listofÂ pict?)Â pict?))
syntax
(with-unquote-rewriterÂ procÂ expression)
syntax
(with-atomic-rewriterÂ name-symbol
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string-or-thunk-returning-pict
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â expression)
syntax
(with-compound-rewriterÂ name-symbol
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â proc
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â expression)
syntax
(with-compound-rewritersÂ ([name-symbolÂ proc]Â ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â expression)
struct
(structÂ lw                        Â (e
Â       Â Â                          Â line
Â       Â Â                          Â line-span
Â       Â Â                          Â column
Â       Â Â                          Â column-span
Â       Â Â                          Â unq?
Â       Â Â                          Â metafunction?)
Â       Â #:constructor-nameÂ make-lw
Â       Â #:mutable)
Â Â eÂ :Â (or/cÂ string?
      Â Â Â Â Â Â symbol?
      Â Â Â Â Â Â pict?
      Â Â Â Â Â Â (listofÂ (or/cÂ (symbolsÂ 'spring)Â lw?)))
Â Â lineÂ :Â exact-positive-integer?
Â Â line-spanÂ :Â exact-positive-integer?
Â Â columnÂ :Â exact-positive-integer?
Â Â column-spanÂ :Â exact-positive-integer?
Â Â unq?Â :Â boolean?
Â Â metafunction?Â :Â boolean?
procedure
(build-lwÂ eÂ lineÂ line-spanÂ columnÂ column-span)Â ->Â lw?
Â Â eÂ :Â (or/cÂ string?
      Â Â Â Â Â Â symbol?
      Â Â Â Â Â Â pict?
      Â Â Â Â Â Â (listofÂ (or/cÂ (symbolsÂ 'spring)Â lw?)))
Â Â lineÂ :Â exact-positive-integer?
Â Â line-spanÂ :Â exact-positive-integer?
Â Â columnÂ :Â exact-positive-integer?
Â Â column-spanÂ :Â exact-positive-integer?
syntax
(to-lwÂ arg)
procedure
(to-lw/stxÂ stx)Â ->Â lw?
Â Â stxÂ :Â syntax?
procedure
(render-lwÂ language/ntsÂ lw)Â ->Â pict?
Â Â language/ntsÂ :Â (or/cÂ (listofÂ symbol?)Â compiled-lang?)
Â Â lwÂ :Â lw?
procedure
(lw->pictÂ language/ntwÂ lw)Â ->Â pict?
Â Â language/ntwÂ :Â (or/cÂ (listofÂ symbol?)Â compiled-lang?)
Â Â lwÂ :Â lw?
procedure
(just-beforeÂ stuffÂ lw)Â ->Â lw?
Â Â stuffÂ :Â (or/cÂ pict?Â string?Â symbol?)
Â Â lwÂ :Â lw?
procedure
(just-afterÂ stuffÂ lw)Â ->Â lw?
Â Â stuffÂ :Â (or/cÂ pict?Â string?Â symbol?)
Â Â lwÂ :Â lw?
